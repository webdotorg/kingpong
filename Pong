import pygame, sys
from pygame.locals import *

# number of frames per second
#Changes this value to speed up or slow down your game
fps = 200

#keeps track of ball direction
ball_dirx = -1 ## -1 = left ## 1 = right
ball_diry = -1 ## -1 = up   ## 1 = down

#Global Variables to be used throughout the progarm
window_width = 600
window_height = 450
line_thickness = 10
paddle_size = 50
paddle_offset = 20

#set up colors
black = (0, 0, 0)
white = (255,255,255)

display_surf = pygame.display.set_mode((window_width, window_height))
 
#initiate variable and set starting positions
#any future changes mad within rectangles
ball_x = window_width/2 - line_thickness/2
ball_y = window_height/2 - line_thickness/2
player_one_position = (window_height - paddle_size) / 2
player_two_position = (window_height - paddle_size) / 2



#Creates Rectangles for ball and paddles
paddle_1 = pygame.Rect(paddle_offset, player_one_position, line_thickness, paddle_size)
paddle_2 = pygame.Rect(window_width - paddle_offset - line_thickness, player_two_position, line_thickness, paddle_size)
ball = pygame.Rect(ball_x, ball_y, line_thickness, line_thickness)



#draws the arena
def draw_arena():
    display_surf.fill(black)
    # draw outline of arena
    pygame.draw.rect(display_surf, white, ((0,0, window_width, window_height)), line_thickness * 2)
    #draw center line
    pygame.draw.line(display_surf, white, ((window_width/2),0), ((window_width/2), window_height), int(line_thickness/4))

#draws paddle
def draw_paddle(paddle):
    #stops paddle moving too low
    if paddle.bottom > window_height - line_thickness:
        paddle.bottom = window_height - line_thickness
    #stops paddle moving too high
    elif paddle.top < line_thickness:
        paddle.top = line_thickness
    #draws paddle
    pygame.draw.rect(display_surf, white, paddle)


#draws ball
def draw_ball(ball):
    pygame.draw.rect(display_surf, white, ball)

def move_ball(ball, ball_dirx, ball_diry):
    ball.x += ball_dirx
    ball.y += ball_diry
    return ball
    
#checks for a collision with a wall and 'bounces ball off
#returns new direction
def check_edge_collision(ball, ball_dirx, ball_diry):
    if ball.top == (line_thickness) or ball.bottom == (window_height - line_thickness):
        ball_diry = ball_diry * -1
    if ball.left == (line_thickness) or ball.right == (window_width - line_thickness):
        ball_dirx = ball_dirx * -1
    return ball_dirx, ball_diry
        

#center line
pygame.draw.line(display_surf, white, ((window_width/2),0),((window_width/2),window_height), (line_thickness))

draw_arena()
draw_paddle(paddle_1)
draw_paddle(paddle_2)
draw_ball(ball)

#ball_dirx, ball_diry = check_edge_collision(ball, ball_dirx, ball_diry)
#move_ball(ball, ball_dirx, ball_diry)
#ball = move_ball(ball, ball_dirx, ball_diry)
#check_edge_collision(ball, ball_dirx, ball_diry)

pygame.display.update()

#main function
def main():
    pygame.init()
    global display_surf

    fps_clock = pygame.time.Clock()
    display_surf = pygame.display.set_mode((window_width, window_height))
    pygame.display.set_caption('Pong')
    
    while True: #main game loop
        for event in pygame.event.get():
            draw_arena()
            draw_paddle(paddle_1)
            draw_paddle(paddle_2)
            draw_ball(ball)            

            move_ball(ball, ball_dirx, ball_diry)
            #ball = move_ball(ball, ball_dirx, ball_diry)
            check_edge_collision(ball, ball_dirx, ball_diry)                        

            
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

        pygame.display.update()
        fps_clock.tick(fps)

if __name__ == '__main__':
    main()




